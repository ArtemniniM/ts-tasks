1. Напиши функцию wrapInArray<T>, которая принимает значение любого типа и возвращает массив, содержащий это значение.
wrapInArray(5) // [5]
wrapInArray("hi") // ["hi"]

2. Напиши функцию printKey<T, K extends keyof T>, которая принимает объект и ключ, и выводит значение этого ключа.
printKey({name: "Alex", age: 25}, "name") // Alex

3. Напиши функцию mergeObjects<T, U>, которая объединяет два объекта в один.
mergeObjects({a: 1}, {b: 2}) // {a: 1, b: 2}

4. Напиши функцию doubleOrRepeat<T>, которая:
 • Если T — число, возвращает число, умноженное на 2
 • Если T — строка, возвращает строку, повторённую дважды
doubleOrRepeat(5) // 10
doubleOrRepeat("Hi") // "HiHi"

5. Функция transformArray<T>:
 • Если массив чисел — возводит каждый элемент в квадрат
 • Если массив строк — переводит в верхний регистр
transformArray([2, 3]) // [4, 9]
transformArray(["hi", "go"]) // ["HI", "GO"]

6. Функция maxOrLongest<T>:
 • Если числа — возвращает максимальное
 • Если строки — возвращает самую длинную
maxOrLongest([3, 8, 5]) // 8
maxOrLongest(["a", "hello", "hi"]) // "hello"

7. Функция evenOrLength<T>:
 • Если число — возвращает true, если оно чётное
 • Если строка — возвращает её длину
evenOrLength(4) // true
evenOrLength("cat") // 3

8. Функция reverseSmart<T>:
 • Если числа — реверсирует массив
 • Если строки — реверсирует буквы в строках массива
reverseSmart([1, 2, 3]) // [3, 2, 1]
reverseSmart(["hi", "ok"]) // ["ih", "ko"]

9. Функция diffOrLengthDiff<T> принимает два аргумента:
 • Если числа — возвращает их разницу
 • Если строки — возвращает разницу в длине
diffOrLengthDiff(10, 4) // 6
diffOrLengthDiff("cat", "mouse") // 2